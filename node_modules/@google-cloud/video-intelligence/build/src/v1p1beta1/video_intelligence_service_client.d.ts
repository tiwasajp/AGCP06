import * as gax from 'google-gax';
import { Callback, CallOptions, Descriptors, ClientOptions, LROperation } from 'google-gax';
import * as protos from '../../protos/protos';
/**
 *  Service that implements Google Cloud Video Intelligence API.
 * @class
 * @memberof v1p1beta1
 */
export declare class VideoIntelligenceServiceClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    operationsClient: gax.OperationsClient;
    videoIntelligenceServiceStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of VideoIntelligenceServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
     *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     */
    constructor(opts?: ClientOptions);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Performs asynchronous video annotation. Progress and results can be
     * retrieved through the `google.longrunning.Operations` interface.
     * `Operation.metadata` contains `AnnotateVideoProgress` (progress).
     * `Operation.response` contains `AnnotateVideoResponse` (results).
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.inputUri
     *   Input video location. Currently, only
     *   [Google Cloud Storage](https://cloud.google.com/storage/) URIs are
     *   supported, which must be specified in the following format:
     *   `gs://bucket-id/object-id` (other URI formats return
     *   {@link google.rpc.Code.INVALID_ARGUMENT|google.rpc.Code.INVALID_ARGUMENT}). For
     *   more information, see [Request
     *   URIs](https://cloud.google.com/storage/docs/request-endpoints). A video URI
     *   may include wildcards in `object-id`, and thus identify multiple videos.
     *   Supported wildcards: '*' to match 0 or more characters;
     *   '?' to match 1 character. If unset, the input video should be embedded
     *   in the request as `input_content`. If set, `input_content` should be unset.
     * @param {Buffer} request.inputContent
     *   The video data bytes.
     *   If unset, the input video(s) should be specified via `input_uri`.
     *   If set, `input_uri` should be unset.
     * @param {number[]} request.features
     *   Required. Requested video annotation features.
     * @param {google.cloud.videointelligence.v1p1beta1.VideoContext} request.videoContext
     *   Additional video context and/or feature-specific parameters.
     * @param {string} [request.outputUri]
     *   Optional. Location where the output (in JSON format) should be stored.
     *   Currently, only [Google Cloud Storage](https://cloud.google.com/storage/)
     *   URIs are supported, which must be specified in the following format:
     *   `gs://bucket-id/object-id` (other URI formats return
     *   {@link google.rpc.Code.INVALID_ARGUMENT|google.rpc.Code.INVALID_ARGUMENT}). For
     *   more information, see [Request
     *   URIs](https://cloud.google.com/storage/docs/request-endpoints).
     * @param {string} [request.locationId]
     *   Optional. Cloud region where annotation should take place. Supported cloud
     *   regions: `us-east1`, `us-west1`, `europe-west1`, `asia-east1`. If no region
     *   is specified, a region will be determined based on video file location.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1p1beta1/video_intelligence_service.annotate_video.js</caption>
     * region_tag:videointelligence_v1p1beta1_generated_VideoIntelligenceService_AnnotateVideo_async
     */
    annotateVideo(request?: protos.google.cloud.videointelligence.v1p1beta1.IAnnotateVideoRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.videointelligence.v1p1beta1.IAnnotateVideoResponse, protos.google.cloud.videointelligence.v1p1beta1.IAnnotateVideoProgress>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    annotateVideo(request: protos.google.cloud.videointelligence.v1p1beta1.IAnnotateVideoRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.videointelligence.v1p1beta1.IAnnotateVideoResponse, protos.google.cloud.videointelligence.v1p1beta1.IAnnotateVideoProgress>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    annotateVideo(request: protos.google.cloud.videointelligence.v1p1beta1.IAnnotateVideoRequest, callback: Callback<LROperation<protos.google.cloud.videointelligence.v1p1beta1.IAnnotateVideoResponse, protos.google.cloud.videointelligence.v1p1beta1.IAnnotateVideoProgress>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `annotateVideo()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1p1beta1/video_intelligence_service.annotate_video.js</caption>
     * region_tag:videointelligence_v1p1beta1_generated_VideoIntelligenceService_AnnotateVideo_async
     */
    checkAnnotateVideoProgress(name: string): Promise<LROperation<protos.google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse, protos.google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress>>;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
